// the configured options and settings for Arundos
#define Arundos_VERSION_MAJOR @Arundos_VERSION_MAJOR@
#define Arundos_VERSION_MINOR @Arundos_VERSION_MINOR@

#pragma once

#include "ae_device.hpp"
#include "ae_game_object.hpp"
#include "ae_pipeline.hpp"
#include "ae_window.hpp"
#include "ae_renderer.hpp"


#include <memory>
#include <vector>

namespace ae {
    class Arundos {
    public:
        // TODO Get ride of these public variables....
        static constexpr int WIDTH = 800;
        static constexpr int HEIGHT = 600;

        Arundos();
        ~Arundos();

        // Do not allow this class to be copied (2 lines below)
        Arundos(const Arundos&) = delete;
        Arundos& operator=(const Arundos&) = delete;

        void run();

    private:
        void loadGameObjects();
        void createPipelineLayout();
        void createPipeline();
        void renderGameObjects(VkCommandBuffer t_commandBuffer);

        AeWindow m_aeWindow{ WIDTH, HEIGHT, "Hello Vulkan!" };
        AeDevice m_aeDevice{ m_aeWindow };
        AeRenderer m_aeRenderer{m_aeWindow, m_aeDevice };
        std::unique_ptr<AePipeline> m_aePipeline; // TODO: Smart Pointer research, learn Cpp
        VkPipelineLayout m_pipelineLayout;
        std::vector<AeGameObject> m_gameObjects;
    };
}  // namespace ae