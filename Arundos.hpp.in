/*! \file Arundos.hpp
    \brief The script defining the Arundos application.
    The Arundos application is defined.
*/

/// The version of the Arundos application being run.
#define Arundos_VERSION_MAJOR @Arundos_VERSION_MAJOR@
#define Arundos_VERSION_MINOR @Arundos_VERSION_MINOR@

#pragma once

#include "ae_device.hpp"
#include "ae_window.hpp"
#include "ae_renderer.hpp"
#include "ae_resource_manager.hpp"

#include "ae_ecs_include.hpp"
#include "ae_de_stack_allocator.hpp"
#include "ae_free_linked_list_allocator.hpp"

#include "game_components.hpp"
#include "game_systems.hpp"

#include <memory>

namespace ae {
    class Arundos {
    public:
        // TODO Get ride of these public variables....

        /// Default window width.
        static constexpr int WIDTH = 800;
        /// Default window height.
        static constexpr int HEIGHT = 600;

        /// Application Constructor
        Arundos();

        /// Application Destructor
        ~Arundos();

        /// Do not allow this class to be copied (2 lines below)
        Arundos(const Arundos&) = delete;
        Arundos& operator=(const Arundos&) = delete;

        /// Runs the application.
        void run();

    private:

        /// Loads game objects into the game.
        void loadGameObjects();

        /// Primary Stack Allocator for the game
        std::size_t m_deStackAllocationSize = 4000000000;
        void* m_deStackAllocation = malloc(m_deStackAllocationSize);
        ae_memory::AeDeStackAllocator m_deStackAllocator{m_deStackAllocationSize,m_deStackAllocation};

        /// Primary Free List Allocator for the game
        std::size_t m_freeLinkedListAllocationSize = 1000000;
        void* m_freeLinkedListAllocation = malloc(m_freeLinkedListAllocationSize);
        ae_memory::AeFreeLinkedListAllocator m_freeLinkedListAllocator{m_freeLinkedListAllocationSize,m_freeLinkedListAllocation};

        /// Declare the application window.
        AeWindow m_aeWindow{ WIDTH, HEIGHT, "Arundos" };

        /// The vulkan graphics device for the application.
        AeDevice m_aeDevice{ m_aeWindow };

        /// The vulkan renderer for the application.
        AeRenderer m_aeRenderer{m_aeWindow, m_aeDevice };

        /// The image samplers available.
        AeSamplers m_aeSamplers{m_aeDevice};

        /// Declare the ECS of the game.
        ae_ecs::AeECS m_aeECS{m_deStackAllocator,m_freeLinkedListAllocator};

        /// Declare the game components, the "C" in ECS.
        GameComponents m_gameComponents{m_aeECS};

        /// Declare the game systems, the "S" in ECS.
        GameSystems m_gameSystems{m_aeECS,
                                  m_gameComponents,
                                  m_aeWindow.getGLFWwindow(),
                                  m_aeDevice,
                                  m_aeRenderer,
                                  m_aeSamplers};

        GameMaterials& m_gameMaterials = m_gameSystems.rendererSystem->getGameMaterials();

    };
}  // namespace ae